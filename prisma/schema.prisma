// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}



model User {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstname String
  lastname String
  email String @unique
  password String
  phone String @unique
  type String @default("user")
  addresses Address[]
  orders    Order[]
  isVerified Boolean @default(false)
}

model Address {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  recipentName String
  recipentPhone String
  street    String
  city      String @default("New Delhi")
  state     String @default("Delhi")
  zipCode   String
  country   String @default("India")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  orders    Order[]
}

model Category {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  products  Product[]
  orderItems  OrderItem[]
}

model Product {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  price       Float
  weight String
  quantity String
  stock String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  images    Image[]
  orderItems  OrderItem[]
}

model Image {
  id String @id @default(cuid())
  imageUrl String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    OrderStatus 
  totalPrice Float
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  items     OrderItem[]
  address   Address    @relation(fields: [addressId], references: [id])
  addressId String
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  totalPrice     Float
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}


